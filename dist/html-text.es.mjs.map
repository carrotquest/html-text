{"version":3,"file":"html-text.es.mjs","sources":["../src/index.js"],"sourcesContent":["import { Sprite } from '@pixi/sprite';\nimport { settings } from '@pixi/settings';\nimport { Texture } from '@pixi/core';\nimport { Rectangle } from '@pixi/math';\nimport { trimCanvas, sign, hex2rgb, hex2string } from '@pixi/utils';\nimport { TextStyle } from '@pixi/text';\n\n/**\n * Text display object that support multi-style HTML text\n * @class\n * @memberof PIXI\n * @extends PIXI.Sprite\n * @see {@link https://pixijs.download/dev/docs/PIXI.Sprite.html PIXI.Sprite}\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n */\nexport class HTMLText extends Sprite\n{\n    /**\n     * @constructor\n     * @param {string} [text] - Text contents\n     * @param {PIXI.TextStyle} [style] - Style settings, not all TextStyle options are supported.\n     * @param {HTMLCanvasElement} [canvas] - Optional canvas to use for rendering.\n     *.       if undefined, will generate it's own canvas using createElement.\n     * @param {object<string, string>} [cssStyle] - CSS Style settings for HTML elements in text\n     *        Where key is selector, value is styles\n     * @param resolution - For some reason our resolution is different on first render. This const is to make it fixed\n     */\n    constructor(text = '', style = {}, canvas, cssStyle = {}, resolution)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas, { scaleMode: settings.SCALE_MODE });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        const ns = 'http://www.w3.org/2000/svg';\n        const svgRoot = document.createElementNS(ns, 'svg');\n        const foreignObject = document.createElementNS(ns, 'foreignObject');\n        const domElement = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n        domElement.classList.add('pixi-html_text');\n\n        foreignObject.setAttribute('height', '100%');\n        foreignObject.setAttribute('width', '100%');\n        svgRoot.appendChild(foreignObject);\n\n        this._domElement = domElement;\n        this._svgRoot = svgRoot;\n        this._foreignObject = foreignObject;\n        this._image = new Image();\n\n        this.canvas = canvas;\n        this.context = this.canvas.getContext('2d');\n        this._resolution = resolution ? resolution : settings.RESOLUTION;\n        this._autoResolution = true;\n        this._text = null;\n        this._style = null;\n        this._cssStyle = null;\n        this._loading = false;\n        this.text = text;\n        this.style = style;\n        this.cssStyle = cssStyle;\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} [respectDirty=true] - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const { style, canvas, context, resolution } = this;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        let css = `\n            display:inline-block;\n            color:${style.fill};\n            font-size: ${style.fontSize}px;\n            font-family:${style.fontFamily};\n            font-weight:${style.fontWeight};\n            font-style:${style.fontStyle};\n            font-variant:${style.fontVariant};\n            letter-spacing:${style.letterSpacing}px;\n            text-align:${style.align};\n            padding:${style.padding}px;\n        `;\n\n        if (style.lineHeight)\n        {\n            css += `line-height:${style.lineHeight}px;`;\n        }\n\n        if (style.wordWrap)\n        {\n            css += `word-wrap:${style.breakWords ? 'break-all' : 'break-word'};`;\n            css += `width:${style.wordWrapWidth}px;`;\n        }\n\n        if (style.strokeThickness)\n        {\n            let { stroke } = style;\n\n            if (typeof color === 'number')\n            {\n                stroke = hex2string(stroke);\n            }\n\n            css += `-webkit-text-stroke-width: ${style.strokeThickness}px;`;\n            css += `-webkit-text-stroke-color: ${stroke};`;\n            css += `text-stroke-width: ${style.strokeThickness}px;`;\n            css += `text-stroke-color: ${stroke};`;\n            css += 'paint-order: stroke;';\n        }\n\n        if (style.dropShadow)\n        {\n            const { dropShadowAngle, dropShadowDistance, dropShadowBlur, dropShadowColor, dropShadowAlpha } = style;\n            const x = Math.round(Math.cos(dropShadowAngle) * dropShadowDistance);\n            const y = Math.round(Math.sin(dropShadowAngle) * dropShadowDistance);\n            let color = dropShadowColor;\n\n            // Convert numbers to hex strings\n            if (typeof color === 'number')\n            {\n                color = hex2string(color);\n            }\n\n            // Check if we should apply alpha\n            if (color.charAt(0) === '#' && dropShadowAlpha < 1)\n            {\n                const [r, g, b] = hex2rgb(parseInt(color.replace('#', ''), 16));\n\n                color = `rgba(${r * 255 | 0}, ${g * 255 | 0}, ${b * 255 | 0}, ${dropShadowAlpha})`;\n            }\n\n            css += `text-shadow: ${x}px ${y}px ${dropShadowBlur}px ${color};`;\n        }\n\n        const dom = this._domElement;\n\n        Object.assign(dom, {\n            innerHTML: this._text,\n            style: css,\n        });\n\n        const cssStyleEl = document.createElement('style');\n\n        cssStyleEl.innerHTML = this.stringCssStyle;\n        dom.insertAdjacentElement('afterbegin', cssStyleEl);\n\n        // Measure the contents\n        document.body.appendChild(dom);\n        const { width, height } = dom.getBoundingClientRect();\n\n        document.body.removeChild(dom);\n\n        // Assemble the svg output\n        this._foreignObject.appendChild(dom);\n\n        this._svgRoot.setAttribute('width', width);\n        this._svgRoot.setAttribute('height', height);\n\n        canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * resolution);\n        canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * resolution);\n\n        if (!this._loading)\n        {\n            const image = this._image;\n            const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n\n            this._loading = true;\n            image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n            image.onload = () =>\n            {\n                context.scale(resolution, resolution);\n                context.clearRect(0, 0, canvas.width, canvas.height);\n                context.drawImage(\n                    image,\n                    0, 0, width, height,\n                    0, 0, width, height,\n                );\n                image.src = '';\n                image.onload = undefined;\n                this._loading = false;\n                this.updateTexture();\n            };\n        }\n    }\n\n    get stringCssStyle()\n    {\n        let css = '';\n\n        for (const k in this._cssStyle)\n        {\n            css += `.pixi-html_text ${k} {${this._cssStyle[k]}}`;\n        }\n\n        return css;\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { canvas, context, style, texture, resolution } = this;\n\n        if (style.trim)\n        {\n            const { width, height, data } = trimCanvas(canvas);\n\n            if (data)\n            {\n                canvas.width = width;\n                canvas.height = height;\n                context.putImageData(data, 0, 0);\n            }\n        }\n\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @private\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     *\n     * @param {PIXI.Rectangle} [rect]\n     * @return {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} [options=true] Same as Sprite destroy options.\n     */\n    destroy(options = true)\n    {\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas..\n        // dont want this hanging around in memory!\n        this.context = null;\n        this.canvas.width = this.canvas.height = 0; // Safari hack\n        this.canvas = null;\n        this._style = null;\n        this._cssStyle = null;\n        this._svgRoot = null;\n        this._domElement = null;\n        this._foreignObject = null;\n        this._image.onload = null;\n        this._image.src = '';\n        this._image = null;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this.canvas.width / this.resolution;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this.canvas.width / this.resolution;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this.canvas.height / this.resolution;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this.canvas.height / this.resolution;\n        this._height = value;\n    }\n\n    /**\n     * The base style to render with text.\n     * @member {PIXI.Style|object}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * The CSS style to render with text.\n     * @member {string}\n     */\n    get cssStyle()\n    {\n        return this._cssStyle;\n    }\n\n    set cssStyle(style) // eslint-disable-line require-jsdoc\n    {\n        this._cssStyle = style || {};\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text.\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n        text = this.sanitiseText(text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    sanitiseText(text)\n    {\n        // Sanitise text - replace <br> with <br/>, &nbsp; with &#160;\n        // See discussion here:\n        // https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n        return text\n            .replace(/<br>/gi, '<br/>')\n            .replace(/<hr>/gi, '<hr/>')\n            .replace(/&nbsp;/gi, '&#160;');\n    }\n}\n"],"names":["HTMLText","text","style","canvas","cssStyle","resolution","document","createElement","width","height","const","texture","Texture","from","scaleMode","settings","SCALE_MODE","orig","Rectangle","trim","super","ns","svgRoot","createElementNS","foreignObject","domElement","classList","add","setAttribute","appendChild","this","_domElement","_svgRoot","_foreignObject","_image","Image","context","getContext","_resolution","RESOLUTION","_autoResolution","_text","_style","_cssStyle","_loading","localStyleID","updateText","respectDirty","styleID","dirty","let","css","lineHeight","wordWrap","breakWords","strokeThickness","color","stroke","hex2string","dropShadow","x","Math","round","cos","dropShadowAngle","dropShadowDistance","y","sin","dropShadowColor","charAt","dropShadowAlpha","hex2rgb","parseInt","replace","dropShadowBlur","dom","Object","assign","innerHTML","cssStyleEl","stringCssStyle","insertAdjacentElement","body","getBoundingClientRect","removeChild","ceil","max","padding","image","svgURL","XMLSerializer","serializeToString","src","encodeURIComponent","onload","scale","clearRect","drawImage","undefined","updateTexture","prototypeAccessors","k","trimCanvas","data","putImageData","baseTexture","_frame","_onTextureUpdate","setRealSize","_render","renderer","_renderCanvas","getLocalBounds","rect","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","_onStyleChange","destroy","options","abs","value","s","sign","_width","_height","TextStyle","String","sanitiseText","Sprite"],"mappings":"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"}